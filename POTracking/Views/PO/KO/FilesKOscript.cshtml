@using HSG.Helper
    <script type="text/javascript" language="javascript" defer="defer">    
    var IsFHEditMode = false;
    var NextNewFileID = -1;
    var filesHeaderModel = function () {
        var self = this;
        
        self.emptyFile = "";

        self.fileToAdd = ko.observable();
        self.allFiles = ko.observableArray(); // Initial items
        
        self.TriggerOpenWin = function (fileFH) {
            openWin("@Url.Action("GetFile", "PO")?" + fileFH.CodeStr(),1,1);
        }
        
        self.setEdited = function (file) {
            file._Edited(!file._Added()); //alert(ko.mapping.toJSON(ko.mapping.fromJS(new Date())()));
            file.UploadDate(Date111); //Date111 ko.mapping.fromJS(new Date())
        }
        self.setEditedFlag = function (file) {
            file._Edited(!file._Added());
            file.LastModifiedDate(Date111);
        }
        self.addFile = function (file) {
            if (file.FileName == null || file.FileName == "")
                {
                   //http://knockoutjs.com/documentation/event-binding.html
                   alert("Please select a file to upload"); return false; 
                }
            else {
            // SO: 857618/javascript-how-to-extract-filename-from-a-file-input-control
                file.FileName = file.FileName.split(/(\\|\/)/g).pop(); //file.FileName.replace("C:\\fakepath\\","");
                if (!IsFHEditMode) {
                    file.ID = NextNewFileID;
                    self.allFiles.push(ko.mapping.fromJS(cloneObservable(file)));
                    NextNewFileID = NextNewFileID - 1;
                    self.emptyFile.ID = NextNewFileID; // NOT WORKING as expected
                }
                else { /* Editmode Handled by KO */ }
            }
            return true; // for ajax submit
        };

        self.removeSelected = function (file) {
            if (file == null)return false;
            
            if(!file._Added()) {file._Deleted(true); return false;}
            
            var data = {}; data["delFH"] = ko.mapping.toJSON(file);
            var url = '@Url.Action("FileKODelete", "PO", new { POGUID = ViewData["POGUID"] })';
            $.post(url, data, function(data, textStatus, jqXHR)
                {
;                    file._Deleted(true);
                    file._Added(false);
                    self.allFiles.remove(file);                        
                }
            );                        
        };

        self.unRemoveSelected = function (file) {
            if (file != null)
            {
                file._Deleted(false);
            }
        };


        self.cancelFile = function (file) {
            IsFHEditMode = false;
            self.fileToAdd(cloneObservable(self.emptyFile));            
        };

        self.saveToServer = function () {
            ko.utils.postJson(location.href, { files: ko.mapping.toJS(self.allFiles) }); //ko.toJSON(self.allFiles)
            return false;
        }
    };

 var viewModelFH = new filesHeaderModel();
 function createFilesHeaderKO()
 {        
        $.getJSON('@Html.Raw(Url.Action("FilesKOVM", "PO", new { POGUID = ViewData["POGUID"] }))',
         function (data) {
             if (data.FileToAdd.ID != -1) data.FileToAdd.ID = NextNewFileID;

             viewModelFH.emptyFile = data.EmptyFileHeader; // THIS SHUD NOT BE AN OBSERVABLE
             viewModelFH.fileToAdd(data.FileToAdd);             
             
             if(data.AllFiles != null)
                viewModelFH.allFiles = ko.mapping.fromJS(data.AllFiles);
            else
                viewModelFH.allFiles = ko.observableArray();

             viewModelFH.FileTypes = ko.mapping.fromJS(data.FileTypes);
             @*alert('PO-FilesHeader');*@
             ko.applyBindings(viewModelFH, document.getElementById("divFiles"));
         });
 }
      
    function callDocReadyFiles(){
        //setFocus("Comment");        
        createFilesHeaderKO();
    }

    </script>    